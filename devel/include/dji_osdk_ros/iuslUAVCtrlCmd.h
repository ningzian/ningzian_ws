// Generated by gencpp from file dji_osdk_ros/iuslUAVCtrlCmd.msg
// DO NOT EDIT!


#ifndef DJI_OSDK_ROS_MESSAGE_IUSLUAVCTRLCMD_H
#define DJI_OSDK_ROS_MESSAGE_IUSLUAVCTRLCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dji_osdk_ros
{
template <class ContainerAllocator>
struct iuslUAVCtrlCmd_
{
  typedef iuslUAVCtrlCmd_<ContainerAllocator> Type;

  iuslUAVCtrlCmd_()
    : task(0)
    , mode(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)  {
    }
  iuslUAVCtrlCmd_(const ContainerAllocator& _alloc)
    : task(0)
    , mode(0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _task_type;
  _task_type task;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> const> ConstPtr;

}; // struct iuslUAVCtrlCmd_

typedef ::dji_osdk_ros::iuslUAVCtrlCmd_<std::allocator<void> > iuslUAVCtrlCmd;

typedef boost::shared_ptr< ::dji_osdk_ros::iuslUAVCtrlCmd > iuslUAVCtrlCmdPtr;
typedef boost::shared_ptr< ::dji_osdk_ros::iuslUAVCtrlCmd const> iuslUAVCtrlCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_osdk_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'dji_osdk_ros': ['/home/dji/ningzian_ws/src/Onboard-SDK-ROS/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "201171de9b3e844efb0e68535a9bcbe9";
  }

  static const char* value(const ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x201171de9b3e844eULL;
  static const uint64_t static_value2 = 0xfb0e68535a9bcbe9ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_osdk_ros/iuslUAVCtrlCmd";
  }

  static const char* value(const ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# for flight task\n\
uint8 task  # 1 takeoff, 2 gohome, 3 hover, 4 ctrl\n\
\n\
# for horizontal control\n\
uint8 mode  # 1 for pos ctrl, 2 for vel ctrl\n\
float64 x\n\
float64 y\n\
\n\
# altitude cmd\n\
float64 z\n\
\n\
# global yaw cmd\n\
float64 yaw\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task);
      stream.next(m.mode);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iuslUAVCtrlCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_osdk_ros::iuslUAVCtrlCmd_<ContainerAllocator>& v)
  {
    s << indent << "task: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.task);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_OSDK_ROS_MESSAGE_IUSLUAVCTRLCMD_H
